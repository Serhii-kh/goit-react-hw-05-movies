{"version":3,"file":"static/js/916.c46b085f.chunk.js","mappings":"+SAEAA,EAAAA,EAAAA,SAAAA,QAAyB,gCACzBA,EAAAA,EAAAA,SAAAA,OAAwB,CACtBC,QAAS,mCACTC,SAAU,SAGX,IAAMC,EACK,sBADLA,EAES,eAFTA,EAGQ,SAHRA,EAIE,WAJFA,EAKI,WAGEC,EAAmB,mCAAG,2FACzBC,EAAaF,EADY,mBAIlBH,EAAAA,EAAAA,GAAM,GAAD,OAAIK,EAAJ,MAJa,gIAAH,qDAQnBC,EAAiB,mCAAG,WAAOC,GAAP,8EACxBC,EAAiBL,EADO,mBAIhBH,EAAAA,EAAAA,GAAM,GAAD,OAAIQ,EAAJ,kBAA0BD,IAJf,wEAM7BE,QAAQC,IAAR,MAN6B,yDAAH,sDAUjBC,EAAc,mCAAG,WAAMC,GAAN,8EACpBC,EAAgBV,EADI,mBAIbH,EAAAA,EAAAA,GAAM,GAAD,OAAIa,GAAJ,OAAkBD,IAJV,wEAM1BH,QAAQC,IAAR,MAN0B,yDAAH,sDAUdI,EAAU,mCAAG,WAAMF,GAAN,gFAChBC,EAAuBV,EAAVY,EAAUZ,EADP,mBAITH,EAAAA,EAAAA,GAAM,GAAD,OAAIa,GAAJ,OAAkBD,GAAlB,OAAuBG,IAJnB,wEAMtBN,QAAQC,IAAR,MANsB,yDAAH,sDAUVM,EAAY,mCAAG,WAAMJ,GAAN,gFAClBC,EAAyBV,EAAZc,EAAYd,EADP,mBAIXH,EAAAA,EAAAA,GAAM,GAAD,OAAIa,GAAJ,OAAkBD,GAAlB,OAAuBK,IAJjB,wEAMxBR,QAAQC,IAAR,MANwB,yDAAH,qD,4HCrDzB,GAAgB,QAAU,yB,SC8E1B,EAzEe,WACd,OAA4BQ,EAAAA,EAAAA,UAAS,IAArC,eAAOC,EAAP,KAAeC,EAAf,KACA,GAAwCC,EAAAA,EAAAA,MAAxC,eAAOC,EAAP,KAAqBC,EAArB,KACMC,GAAWC,EAAAA,EAAAA,MACXC,GAAYC,EAAAA,EAAAA,SAAO,GACnBC,EAAcN,EAAaO,IAAI,SAoCrC,OAbAC,EAAAA,EAAAA,YAAU,WACTrB,QAAQC,IAAIgB,GACPA,EAAUK,UAIfzB,EAAAA,EAAAA,IAAkBsB,GAAaI,MAAK,SAAAC,GACnC,IAAgBC,EAAcD,EAAtBE,KAAQD,QAChBd,EAAUc,EACV,GAED,GAAE,CAACR,EAAWE,KAGd,UAACQ,EAAA,EAAD,YACC,kBAAMC,UAAWC,EAAAA,WAAgBC,SAhCd,SAAAC,GACpBA,EAAEC,iBACFf,EAAUK,SAAU,EAEA,KAAhBH,GAAuBA,IAK3BtB,EAAAA,EAAAA,IAAkBsB,GAAaI,MAAK,SAAAC,GACnC,IAAgBC,EAAcD,EAAtBE,KAAQD,QAEG,IAAnBA,EAAQQ,OAAetB,EAAUc,GAAWS,MAAM,gCAClD,IACDlC,QAAQC,IAAIgB,IATXiB,MAAM,wCAUP,EAiBC,WACC,mBAAQC,KAAK,SAAb,UACC,wCAED,kBACCP,UAAWC,EAAAA,kBACXO,MAAOjB,GAA4B,GACnCkB,SA3CiB,SAAC,GAA2B,IAAfD,EAAc,EAAxBE,OAAUF,MAClBtB,EAAL,KAAVsB,EAA+B,CAAC,EAAqB,CAAEtC,MAAO,CAACsC,IAC/D,EA0CGD,KAAK,OACLI,aAAa,MACbC,WAAS,EACTC,YAAY,gBACZC,KAAK,mBAGNhC,IAAU,wBACTA,EAAOiC,KAAI,gBAAGxC,EAAH,EAAGA,GAAIyC,EAAP,EAAOA,MAAP,OACX,yBACA,SAAC,KAAD,CAAMC,GAAE,UAAK1C,GAAM2C,MAAO,CAAEC,KAAMhC,GAAlC,SACE6B,KAFOzC,EADE,QAWf,C","sources":["components/Api/fetchMovies.js","webpack://react-homework-template/./src/components/pages/Movies/Movies.module.css?078c","components/pages/Movies/Movies.jsx"],"sourcesContent":["import axios from 'axios';\n\naxios.defaults.baseURL = 'https://api.themoviedb.org/3/';\naxios.defaults.params = {\n  api_key: 'e4624f9b78ee3bac020d603dacbf8ced',\n  language: 'en-US',\n};\n\n const END_POINTS = {\n  TRANDING: 'trending/movie/week',\n  SEARCH_MOVIE: 'search/movie',\n  MOVIE_BY_ID: 'movie/',\n  CASTS: '/credits',\n  REVIEWS: '/reviews',\n};\n\nexport const fetchTrandingMovies = async () => {\n  const { TRANDING } = END_POINTS;\n\n  try {\n    return await axios(`${TRANDING}?`);\n  } catch (error) {}\n};\n\nexport const fetchMovieByQuery = async (query) => {\n\tconst { SEARCH_MOVIE } = END_POINTS;\n\n  try {\n    return await axios(`${SEARCH_MOVIE}?query=${query}`);\n  } catch (error) {\n    console.log(error);\n  }\n};\n\nexport const fetchMovieById = async id => {\n  const { MOVIE_BY_ID } = END_POINTS;\n\n  try {\n    return await axios(`${MOVIE_BY_ID}${id}`);\n  } catch (error) {\n    console.log(error);\n  }\n};\n\nexport const fetchCasts = async id => {\n  const { MOVIE_BY_ID, CASTS } = END_POINTS;\n\n  try {\n    return await axios(`${MOVIE_BY_ID}${id}${CASTS}`);\n  } catch (error) {\n    console.log(error);\n  }\n};\n\nexport const fetchReviews = async id => {\n  const { MOVIE_BY_ID, REVIEWS } = END_POINTS;\n\n  try {\n    return await axios(`${MOVIE_BY_ID}${id}${REVIEWS}`);\n  } catch (error) {\n    console.log(error);\n  }\n};\n","// extracted by mini-css-extract-plugin\nexport default {\"Wrapper\":\"Movies_Wrapper__NOflq\"};","import { useEffect, useRef, useState } from \"react\";\nimport { Link, useLocation, useSearchParams } from \"react-router-dom\";\nimport { fetchMovieByQuery } from \"components/Api/fetchMovies\";\nimport { Wrapper } from \"components/Wrapper/Wrapper\";\nimport css from '../Movies/Movies.module.css'\n\nconst Movies = () => {\n\tconst [movies, setMovies] = useState([])\n\tconst [searchParams, setSearchParams] = useSearchParams()\n\tconst location = useLocation()\n\tconst submitted = useRef(false)\n\tconst searchQuery = searchParams.get('query')\n\n\tconst handleChange = ({ target: { value } }) => {\n\t\tvalue === \"\" ? setSearchParams({}) : setSearchParams({ query: [value] });\n\t}\n\n\tconst handleSubmit = e => {\n\t\te.preventDefault();\n\t\tsubmitted.current = true\n\n\t\tif (searchQuery === '' || !searchQuery) {\n\t\t\talert('Please, enter your search movie name!')\n\t\t\treturn\n\t\t}\n\n\t\tfetchMovieByQuery(searchQuery).then(response => {\n\t\t\tconst { data: { results } } = response\n\n\t\t\tresults.length !== 0 ? setMovies(results) : alert('No results for your search :(')\n\t\t})\n\t\tconsole.log(submitted)\n\t};\n\n\tuseEffect(() => {\n\t\tconsole.log(submitted)\n\t\tif (!submitted.current) {\n\t\t\treturn\n\t\t}\n\n\t\tfetchMovieByQuery(searchQuery).then(response => {\n\t\t\tconst { data: { results } } = response\n\t\t\tsetMovies(results)\n\t\t})\n\n\t}, [submitted, searchQuery])\n\n\treturn (\n\t\t<Wrapper>\n\t\t\t<form className={css.SearchForm} onSubmit={handleSubmit}>\n\t\t\t\t<button type=\"submit\">\n\t\t\t\t\t<span>Search</span>\n\t\t\t\t</button>\n\t\t\t\t<input\n\t\t\t\t\tclassName={css.SearchForm__input}\n\t\t\t\t\tvalue={searchQuery ? searchQuery : ''}\n\t\t\t\t\tonChange={handleChange}\n\t\t\t\t\ttype=\"text\"\n\t\t\t\t\tautoComplete=\"off\"\n\t\t\t\t\tautoFocus\n\t\t\t\t\tplaceholder=\"Search movies\"\n\t\t\t\t\tname=\"searchQuery\"\n\t\t\t\t/>\n\t\t\t</form>\n\t\t\t{movies && <ul>\n\t\t\t\t{movies.map(({ id, title }) =>\n\t\t\t\t(<li key={id}>\n\t\t\t\t\t<Link to={`${id}`} state={{ from: location }}>\n\t\t\t\t\t\t{title}\n\t\t\t\t\t</Link>\n\t\t\t\t</li>)\n\t\t\t\t)\n\t\t\t\t}\n\t\t\t</ul>}\n\t\t</Wrapper>\n\t);\n}\n\n\nexport default Movies;"],"names":["axios","api_key","language","END_POINTS","fetchTrandingMovies","TRANDING","fetchMovieByQuery","query","SEARCH_MOVIE","console","log","fetchMovieById","id","MOVIE_BY_ID","fetchCasts","CASTS","fetchReviews","REVIEWS","useState","movies","setMovies","useSearchParams","searchParams","setSearchParams","location","useLocation","submitted","useRef","searchQuery","get","useEffect","current","then","response","results","data","Wrapper","className","css","onSubmit","e","preventDefault","length","alert","type","value","onChange","target","autoComplete","autoFocus","placeholder","name","map","title","to","state","from"],"sourceRoot":""}